##########
# SYSTEM #
##########

p() {
    if [ "$(bat --paging=never "$@" 2>/dev/null | wc -l)" -gt "$(tput lines)" ]; then
        sudo bat --pager "less -RF +G" "$@"
    else
       sudo bat --pager "less -RF" "$@"
    fi
}

mcd() {
    mkdir -p "$1" && cd "$1"
}

op() {
    xdg-open "$1" &>/dev/null &
}

off() {
    if [[ "$1" == "off" ]]; then
        shutdown -c
    else
        shutdown -h "$1"
    fi
}

sl() {
    local folder="${1:-.}"
    local threshold="${2:-1M}"
    sudo du -hac --max-depth=1 --threshold="$threshold" "$folder"/ 2>/dev/null | sort -hr | sed -E "/^\s*[0-9.]+[KMGTP]?\s+${folder//\//\\/}\/$/d; s|$folder/||g"
}

fs() {
     sudo find . -path "./.cache" -prune -o -regex ".*$1.*"
}

fd() {
  sudo find . -path "./.cache" -prune -o -type d -regex ".*$1.*"
}

iv() {
 nsxiv "$@" -r "$NSXIV_OPTS" -o
}

ex() {
 local dir="${1:-$pwd}"
 nautilus "$dir" > /dev/null 2>&1 & disown
}

__head() {
  head -n "${1:-10}"
}

__tail() {
  tail -n "${1:-10}"
}

#############
# UTILITIES #
#############

alias cfi="sudo cpupower frequency-info"
alias cfs="sudo cpupower frequency-set"

pkg() {
    local date_filter=""
    local month_filter=""

    while getopts "d:m:" opt; do
        case $opt in
            d) date_filter="$OPTARG" ;;
            m) month_filter="$OPTARG" ;;
            *) return 1 ;;
        esac
    done

     local base_command="$aurhelper -Qi | awk '/^Name/ {name=\$3} /^Install Date/ {print \$4, \$5, \$6, \$7, \$8, \$9, name}'"
    
    if [[ -n $date_filter ]]; then
       base_command="$base_command | awk -v date=\"$date_filter\" '\$2 ~ date'"
    fi

    if [[ -n $month_filter ]]; then
        base_command="$base_command | awk -v month=\"$month_filter\" '\$3 ~ month'"
    fi

    result=$(eval "$base_command")

    if [[ -n $result ]]; then
        echo "$result" | sort -k4,4n -k3,3M -k2,2n -k1,1M -k6,6 -k5,5
        #echo "$result" | sort -k3,3r -k2,2n -k1,1M -k6,6 -k5,5
    else
        echo "No matching packages found."
    fi
}

hb() {
    if [ $# -eq 0 ]; then
        echo "No file path or text specified."
        return
    fi

    uri="http://bin.christitus.com/documents"

    if [ -f "$1" ]; then
        content="$(cat "$1")"
    else
        content="$1"
    fi

    response=$(curl -s -X POST -d "$content" "$uri")
    if [ $? -eq 0 ]; then
        hasteKey=$(echo "$response" | jq -r '.key')
        echo "http://bin.christitus.com/raw/$hasteKey" | wl-copy
        echo "http://bin.christitus.com/raw/$hasteKey"
    else
        echo "Failed to upload the document."
    fi
}

gf() {
    if [ "$#" -ne 1 ]; then
        echo "Usage: upload_to_gofile <file>"
        return 1
    fi

    local file="$1"

    if [ ! -f "$file" ]; then
        echo "Error: File '$file' not found."
        return 1
    fi

    local server_response
    server_response=$(curl -s https://api.gofile.io/servers)

    local server_name
    server_name=$(echo "$server_response" | jq -r '.data.servers[0].name')

    if [ -z "$server_name" ]; then
        echo "Error: Failed to fetch server name."
        return 1
    fi

    local upload_url="https://${server_name}.gofile.io/uploadFile"
    local upload_response
    upload_response=$(curl -s -X POST "$upload_url" \
        -H "Content-Type: multipart/form-data" \
        -F "file=@$file")

    link=$(echo "$upload_response" | jq -r '.data.downloadPage')
    token=$(echo "$upload_response" | jq -r '.data.guestToken')
    echo "$token" | wl-copy
    echo "$link" | wl-copy
    echo "$link"
}


fans() {
   local gpu_temp=$(nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader)
   sensors -j | jq -r --arg gpu_temp "$gpu_temp" '
  .["asus-isa-0000"].cpu_fan.fan1_input as $cpu_fan |
  .["asus-isa-0000"].gpu_fan.fan2_input as $gpu_fan |
  .["acpitz-acpi-0"].temp1.temp1_input as $cpu_temp |
  .["amdgpu-pci-0500"].edge.temp1_input as $igpu_temp |
"CPU Temp: \($cpu_temp | tostring | tonumber | . * 1.00 | floor / 1.00)°C
iGPU Temp: \($igpu_temp | tostring | tonumber | . * 1.00 | floor / 1.00)°C
CPU Fan: \($cpu_fan | tostring | tonumber | . * 1.00 | floor / 1.00)

GPU Temp: \($gpu_temp)°C
GPU Fan: \($gpu_fan | tostring | tonumber | . * 1.00 | floor / 1.00)"'
}

timer() {
    local seconds=0
    local sound_file="/home/kayc/Misc/Sounds/notification.wav"  # Path to the sound file

    # Check for the -s flag
    if [[ $1 == "-s" ]]; then
        seconds=$2  # If -s is provided, use the second argument
    else
        seconds=$(($1 * 60))  # Convert minutes to seconds
    fi

    # Validate the input
    if ! [[ $seconds =~ ^[0-9]+$ ]] || [ "$seconds" -le 0 ]; then
        echo "Usage: timer [minutes] or timer -s [seconds]"
        return 1
    fi

    notify-send "Timer set for $(($seconds / 60)) minutes $((seconds % 60)) seconds."

    setsid bash -c "{
        sleep \"$seconds\"
        ffplay -nodisp -autoexit \"$sound_file\"
        notify-send \"Timer\" \"Time's up!\"
    }" < /dev/null > /dev/null 2>&1
}

alias gces="TERM=xterm ssh gces"
alias link="ssh -NfL 6890:localhost:6890 gces"
alias ports="netstat -tuln"
alias portsa="sudo lsof -i -P -n | grep LISTEN"


